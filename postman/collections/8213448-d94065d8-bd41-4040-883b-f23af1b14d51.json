{
	"info": {
		"_postman_id": "8213448-d94065d8-bd41-4040-883b-f23af1b14d51",
		"name": "Postman Testing - GH Change",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Content type is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Email is in a valid format', function () {",
							"    const responseData = pm.response.json();",
							"    responseData.forEach(function (user) {",
							"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
							"    });",
							"})",
							"",
							"pm.test('Verify that the address object contains the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(function (user) {",
							"        pm.expect(user.address).to.be.an('object');",
							"        pm.expect(user.address.street).to.exist;",
							"        pm.expect(user.address.suite).to.exist;",
							"        pm.expect(user.address.city).to.exist;",
							"        pm.expect(user.address.zipcode).to.exist;",
							"        pm.expect(user.address.geo).to.be.an('object');",
							"        pm.expect(user.address.geo.lat).to.exist;",
							"        pm.expect(user.address.geo.lng).to.exist;",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8213448-ff9045ae-9195-42ec-9b1f-429f44cf6a60",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Posts",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9e1a3986-d2ce-4a3b-819f-d802647dfff9",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - userId, id, title, and body\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(function(post) {",
							"        pm.expect(post.userId).to.exist;",
							"        pm.expect(post.id).to.exist;",
							"        pm.expect(post.title).to.exist;",
							"        pm.expect(post.body).to.exist;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Title and body are non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"  ",
							"  responseData.forEach(function(post) {",
							"    pm.expect(post.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"    pm.expect(post.body).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Body should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"UserId and id are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(post) {",
							"        pm.expect(post.userId).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(post.id).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8213448-be19ffa7-2369-4e41-b56e-7c81fa9c606d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get A Single Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Content-Type header is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Title and body should be non-empty strings', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Title should not be empty');",
							"    pm.expect(responseData.body).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Body should not be empty');",
							"})",
							"",
							"pm.test('Response time is less than 200ms', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8213448-edb22b4d-86ca-4de3-979d-76a8bd9ae240",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - postId, id, name, email, and body\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(comment => {",
							"        pm.expect(comment).to.have.property('postId');",
							"        pm.expect(comment).to.have.property('id');",
							"        pm.expect(comment).to.have.property('name');",
							"        pm.expect(comment).to.have.property('email');",
							"        pm.expect(comment).to.have.property('body');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(comment) {",
							"        pm.expect(comment.email).to.match(/\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\b/i);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Body should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(comment) {",
							"        pm.expect(comment.body).to.exist.and.to.not.be.empty;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8213448-ed22ee4a-9a8e-4d22-aa71-61ac43de5577",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "175548d8-0ea8-4276-86c0-313e4133857d",
						"exec": [
							"const response = pm.response.json();",
							"",
							"// Test for status code",
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test for response time",
							"pm.test('Response time is less than 200ms', () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Test for response body is an array",
							"pm.test('Response body is an array', () => {",
							"    pm.expect(response).to.be.an('array');",
							"});",
							"",
							"// Test for each object in the response array",
							"response.forEach(todo => {",
							"    pm.test('Each todo object has required properties', () => {",
							"        pm.expect(todo).to.have.all.keys('userId', 'id', 'title', 'completed');",
							"        pm.expect(todo.userId).to.be.a('number');",
							"        pm.expect(todo.id).to.be.a('number');",
							"        pm.expect(todo.title).to.be.a('string');",
							"        pm.expect(todo.completed).to.be.a('boolean');",
							"    });",
							"});",
							"",
							"// Test for content-type header",
							"pm.test('Content-Type is application/json', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8213448-a927505e-4cf1-49b8-900e-84d8128179f2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/todos",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"todos"
					]
				}
			},
			"response": []
		}
	]
}
